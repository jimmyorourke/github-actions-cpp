name: CI

on:
  push:
    branches: [ $default-branch ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # enable manual trigger from the UI

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows MSVC",
            os: windows-latest,
            # let's use MSBuild with VS solution files instead of Ninja just for fun
            generator: "Visual Studio 16 2019"
          }
        - {
            name: "Ubuntu GCC",
            os: ubuntu-latest,
            generator: "Ninja"
          }
        - {
            name: "macOS Clang",
            os: macos-latest,
            generator: "Ninja"
          }
    name: ${{matrix.config.name}}
    runs-on: ${{matrix.config.os}}
    steps:
    - uses: actions/checkout@v2
  
    - name: Install Conan
      # cool, pip is a convenient cross-platform way to install ninja too!
      # Consider using a cache 
      # https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows
      # https://github.com/actions/cache/blob/main/examples.md#python---pip
      run: pip3 install conan ninja
      
    - name: Conan Install (Linux)
      # Consider using a cache
      # https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows
      # https://github.com/turtlebrowser/conan-cache/blob/master/README.md
      
      # https://stackoverflow.com/a/42163789
      # https://docs.conan.io/en/latest/howtos/manage_gcc_abi.html
      if: runner.os == 'Linux'
      run: conan install . -if ${{github.workspace}}/build -s compiler.libcxx=libstdc++11

    - name: Conan Install (Linux) 
      if: runner.os != 'Linux' # clunky but there's no else statement
      run: conan install . -if ${{github.workspace}}/build

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # surprisingly, running vcvars to set env variables is not needed for windows
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "${{matrix.config.generator}}"

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -V -C ${{env.BUILD_TYPE}}
